https://leetcode.com/problems/maximum-width-of-binary-tree/description/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    
    int widthOfBinaryTree(TreeNode* root) {

        queue<pair<TreeNode*,long>> lvl;

        if(root==NULL)
            return 0;

        int ans= INT_MIN;

        lvl.push({root,0});

        int first,last;

        while(lvl.empty()==false)
        {   
            auto itr =lvl.front();
            int minVal = itr.second;
            int size = lvl.size();

            for(int i=0;i<size ; i++)
            {   
                int curr = lvl.front().second - minVal;
                TreeNode* temp = lvl.front().first;
                lvl.pop();

                if(i==0)
                    first = curr;
                
                if(i==size-1)
                    last=curr;

                if(temp->left)
                {
                    lvl.push({temp->left,2*(long)curr+1});
                }

                if(temp->right)
                {
                    lvl.push({temp->right,2*(long)curr+2});
                }

            }

            ans=max(ans,last-first+1);
        }

        return ans;
    }
};
