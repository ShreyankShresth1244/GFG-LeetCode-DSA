https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/description/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        vector<vector<int>> ans;

        if(root == NULL)
            return ans;

        queue<pair<TreeNode*,pair<int,int>>> q;

        map<int,map<int,multiset<int>>> mpp;

        TreeNode* temp = root;

        q.push({temp,{0,0}});

        while(q.empty()==false)
        {   
            auto itr = q.front();
            temp = itr.first;
            int vertical = itr.second.first;
            int level = itr.second.second;
            mpp[vertical][level].insert(temp->val);
            q.pop();

            if(temp->left)
            {
                q.push({temp->left,{vertical-1,level+1}});
            }

            if(temp->right)
            {
                q.push({temp->right,{vertical+1,level+1}});
            }

        }


        for(auto x : mpp)  
        {     
            vector<int> col;

            for(auto y : x.second)
            {
                for(auto z = y.second.begin(); z!= y.second.end(); z++)
                {
                    col.push_back(*z);
                }
            }

            ans.push_back(col);
        }

        return ans;

    }
};
