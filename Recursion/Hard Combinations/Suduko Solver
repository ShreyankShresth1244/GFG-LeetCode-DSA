https://leetcode.com/problems/sudoku-solver/description/


class Solution {
public:

    bool check(vector<vector<char>> & board,int row,int col,char c)
    {
        for(int i=0;i<board.size();i++)
        {
            if(i!= col && board[row][i]==c)
                return false;
            if(i!= row && board[i][col]==c)
                return false;
        }

        int rowStart=row-(row%3);
        int rowEnd=rowStart+3;

        int colStart=col-(col%3);
        int colEnd=colStart+3;

        for(int i=rowStart;i<rowEnd;i++)
        {
            for(int j=colStart;j<colEnd;j++)
            {
                if(i!=row && j!=col && board[i][j]==c)
                    return false;
            }
        }

        return true;
    }

    bool solve(vector<vector<char>> &board)
    {
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]=='.')
                {
                    for(char k='1'; k<='9';k++)
                    {
                        if(check(board,i,j,k))
                            {
                                board[i][j]=k;

                                if(solve(board)==true)
                                    return true;
                                else
                                    board[i][j]='.';
                            }

                    }

                    return false;
                }
            }
        }

        return true;
    }


    void solveSudoku(vector<vector<char>>& board) {
        
        solve(board);
            
    }
};
