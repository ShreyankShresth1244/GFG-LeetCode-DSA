https://leetcode.com/problems/combination-sum-iii/description/



class Solution {
public:

    void getSum(vector<vector<int>> &ans,vector<int> &ds,vector<int> & nums,int ind,int target,int n,int k)
    {
        if(ind==n)
        {
            if(target==0 && ds.size()==k)
            {   

                ans.push_back(ds);
            }
        return;
        }
        if(nums[ind]<=target)
            {
                ds.push_back(nums[ind]);
                getSum(ans,ds,nums,ind+1,target-nums[ind],n,k);
                ds.pop_back();
            }

            getSum(ans,ds,nums,ind+1,target,n,k);

    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> nums;

        vector<vector<int>> ans;

        vector<int> ds;
        
        for(int i=1;i<=9;i++)
        {
            nums.push_back(i);
        }


        getSum(ans,ds,nums,0,n,9,k);

        return ans;
    }
};
