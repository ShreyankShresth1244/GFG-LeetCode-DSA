https://www.codingninjas.com/studio/problems/maximum-sum-of-non-adjacent-elements_843261?leftPanelTab=2


MEMOIZATION

#include <bits/stdc++.h> 
int maxSum(int n,vector<int> &dp,vector<int> &nums)
{
    if(n==0)
        return nums[n];

    if(dp[n]!=-1)
        return dp[n];

            int pick = nums[n]+maxSum(n-2,dp,nums);
            int nonpick= maxSum(n-1,dp,nums);
        
    return dp[n]=max(pick,nonpick);
}

int maximumNonAdjacentSum(vector<int> &nums){
    
    vector<int> dp(nums.size()+1,-1);

    return maxSum(nums.size()-1,dp,nums);

}


TABULATION


#include <bits/stdc++.h> 

int maximumNonAdjacentSum(vector<int> &nums){
    
    vector<int> dp(nums.size()+1,-1);

    dp[0]=nums[0];

    for(int i=1;i<=nums.size();i++)
    {   
        int pick=nums[i];

        if(i-2>=0)
            pick +=dp[i-2];
        int notpick= dp[i-1];

        dp[i]=max(pick,notpick);
    }

    return dp[nums.size()];

}


SPACE OPTIMIZATION( using prev2,prev,curr )

#include <bits/stdc++.h> 

int maximumNonAdjacentSum(vector<int> &nums){
    

    int prev2=0;
    int prev=nums[0];
    int curr=0;
    for(int i=1;i<nums.size();i++)
    {   
        int pick=nums[i];

        if(i>1)
            pick +=prev2;

        int notpick= prev;

        curr=max(pick,notpick);

        prev2=prev;
        prev=curr;
    }

    return prev;

}
